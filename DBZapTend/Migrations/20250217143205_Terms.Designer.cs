// <auto-generated />
using System;
using DBZapTend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DBZapTend.Migrations
{
    [DbContext(typeof(DbzapContext))]
    [Migration("20250217143205_Terms")]
    partial class Terms
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DBZapTend.Models.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idCategory");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCategory"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("IdCategory")
                        .HasName("Category_pkey");

                    b.ToTable("Category", "mydb");
                });

            modelBuilder.Entity("DBZapTend.Models.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("UserIduser")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_iduser");

                    b.HasKey("Id")
                        .HasName("Instance_pkey");

                    b.HasIndex("UserIduser");

                    b.ToTable("Instance", "mydb");
                });

            modelBuilder.Entity("DBZapTend.Models.Nicho", b =>
                {
                    b.Property<int>("IdNichos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idNichos");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdNichos"));

                    b.Property<int?>("CategoryIdCategory")
                        .HasColumnType("integer")
                        .HasColumnName("Category_idCategory");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("IdNichos")
                        .HasName("Nichos_pkey");

                    b.HasIndex("CategoryIdCategory");

                    b.ToTable("Nichos", "mydb");
                });

            modelBuilder.Entity("DBZapTend.Models.Payment", b =>
                {
                    b.Property<int>("IdPayments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idPayments");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPayments"));

                    b.Property<string>("Cycle")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("Description")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTime?>("DueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("PlanId")
                        .HasColumnType("integer")
                        .HasColumnName("Plan_Id");

                    b.Property<string>("TypePayment")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("User_Id");

                    b.Property<decimal>("ValuePayment")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("IdPayments")
                        .HasName("Payments_pkey");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments", "mydb");
                });

            modelBuilder.Entity("DBZapTend.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountInstance")
                        .HasColumnType("integer");

                    b.Property<string>("Annually")
                        .HasColumnType("text");

                    b.Property<string>("DiscountAnnually")
                        .HasColumnType("text");

                    b.Property<string>("DiscountMonthly")
                        .HasColumnType("text");

                    b.Property<string>("Monthly")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Plan_pkey");

                    b.ToTable("Plan", "mydb");
                });

            modelBuilder.Entity("DBZapTend.Models.Prompt", b =>
                {
                    b.Property<int>("IdPrompts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idPrompts");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPrompts"));

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NichosIdNichos")
                        .HasColumnType("integer")
                        .HasColumnName("Nichos_idNichos");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("IdPrompts")
                        .HasName("Prompts_pkey");

                    b.HasIndex("NichosIdNichos");

                    b.ToTable("Prompts", "mydb");
                });

            modelBuilder.Entity("DBZapTend.Models.UserNicho", b =>
                {
                    b.Property<int>("IdUserNichos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idUser_Nichos");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUserNichos"));

                    b.Property<int?>("NichosIdNichos")
                        .HasColumnType("integer")
                        .HasColumnName("Nichos_idNichos");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("User_Id");

                    b.HasKey("IdUserNichos")
                        .HasName("User_Nichos_pkey");

                    b.HasIndex("NichosIdNichos");

                    b.HasIndex("UserId");

                    b.ToTable("User_Nichos", "mydb");
                });

            modelBuilder.Entity("DBZapTend.Models.ValoresVariavei", b =>
                {
                    b.Property<int>("IdValoresVariaveis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idValores_Variaveis");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdValoresVariaveis"));

                    b.Property<int?>("PromptsIdPrompts")
                        .HasColumnType("integer")
                        .HasColumnName("Prompts_idPrompts");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("User_Id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("VariaveisIdVariaveis")
                        .HasColumnType("integer")
                        .HasColumnName("Variaveis_idVariaveis");

                    b.HasKey("IdValoresVariaveis")
                        .HasName("Valores_Variaveis_pkey");

                    b.HasIndex("PromptsIdPrompts");

                    b.HasIndex("UserId");

                    b.HasIndex("VariaveisIdVariaveis");

                    b.ToTable("Valores_Variaveis", "mydb");
                });

            modelBuilder.Entity("DBZapTend.Models.Variavei", b =>
                {
                    b.Property<int>("IdVariaveis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idVariaveis");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdVariaveis"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<int?>("PromptsIdPrompts")
                        .HasColumnType("integer")
                        .HasColumnName("Prompts_idPrompts");

                    b.HasKey("IdVariaveis")
                        .HasName("Variaveis_pkey");

                    b.HasIndex("PromptsIdPrompts");

                    b.ToTable("Variaveis", "mydb");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<string>("IdAutentication")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CpfCnpj")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<int?>("PlanId")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("Telephone")
                        .HasColumnType("bigint");

                    b.Property<bool>("TermsAccepted")
                        .HasColumnType("boolean");

                    b.Property<string>("TermsVersion")
                        .HasColumnType("text");

                    b.HasKey("IdAutentication")
                        .HasName("User_IdAutentication_pkey");

                    b.HasIndex("PlanId")
                        .IsUnique();

                    b.HasIndex(new[] { "IdAutentication" }, "User_IdAutentication_unique")
                        .IsUnique();

                    b.ToTable("User", "mydb");
                });

            modelBuilder.Entity("DBZapTend.Models.Instance", b =>
                {
                    b.HasOne("User", "UserIduserNavigation")
                        .WithMany("Instances")
                        .HasForeignKey("UserIduser")
                        .HasConstraintName("fk_instance_user");

                    b.Navigation("UserIduserNavigation");
                });

            modelBuilder.Entity("DBZapTend.Models.Nicho", b =>
                {
                    b.HasOne("DBZapTend.Models.Category", "CategoryIdCategoryNavigation")
                        .WithMany("Nichos")
                        .HasForeignKey("CategoryIdCategory")
                        .HasConstraintName("fk_Nichos_Category1");

                    b.Navigation("CategoryIdCategoryNavigation");
                });

            modelBuilder.Entity("DBZapTend.Models.Payment", b =>
                {
                    b.HasOne("DBZapTend.Models.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId");

                    b.HasOne("User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_Payments_User1");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DBZapTend.Models.Prompt", b =>
                {
                    b.HasOne("DBZapTend.Models.Nicho", "NichosIdNichosNavigation")
                        .WithMany("Prompts")
                        .HasForeignKey("NichosIdNichos")
                        .HasConstraintName("fk_Prompts_Nichos1");

                    b.Navigation("NichosIdNichosNavigation");
                });

            modelBuilder.Entity("DBZapTend.Models.UserNicho", b =>
                {
                    b.HasOne("DBZapTend.Models.Nicho", "NichosIdNichosNavigation")
                        .WithMany("UserNichos")
                        .HasForeignKey("NichosIdNichos")
                        .HasConstraintName("fk_User_Nichos_Nichos1");

                    b.HasOne("User", "User")
                        .WithMany("UserNichos")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_User_Nichos_User1");

                    b.Navigation("NichosIdNichosNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DBZapTend.Models.ValoresVariavei", b =>
                {
                    b.HasOne("DBZapTend.Models.Prompt", "PromptsIdPromptsNavigation")
                        .WithMany("ValoresVariaveis")
                        .HasForeignKey("PromptsIdPrompts")
                        .HasConstraintName("fk_Valores_Variaveis_Prompts1");

                    b.HasOne("User", "User")
                        .WithMany("ValoresVariaveis")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_Valores_Variaveis_User1");

                    b.HasOne("DBZapTend.Models.Variavei", "VariaveisIdVariaveisNavigation")
                        .WithMany("ValoresVariaveis")
                        .HasForeignKey("VariaveisIdVariaveis")
                        .HasConstraintName("fk_Valores_Variaveis_Variaveis1");

                    b.Navigation("PromptsIdPromptsNavigation");

                    b.Navigation("User");

                    b.Navigation("VariaveisIdVariaveisNavigation");
                });

            modelBuilder.Entity("DBZapTend.Models.Variavei", b =>
                {
                    b.HasOne("DBZapTend.Models.Prompt", "PromptsIdPromptsNavigation")
                        .WithMany("Variaveis")
                        .HasForeignKey("PromptsIdPrompts")
                        .HasConstraintName("fk_Variaveis_Prompts1");

                    b.Navigation("PromptsIdPromptsNavigation");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("DBZapTend.Models.Plan", "Plan")
                        .WithOne("User")
                        .HasForeignKey("User", "PlanId");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("DBZapTend.Models.Category", b =>
                {
                    b.Navigation("Nichos");
                });

            modelBuilder.Entity("DBZapTend.Models.Nicho", b =>
                {
                    b.Navigation("Prompts");

                    b.Navigation("UserNichos");
                });

            modelBuilder.Entity("DBZapTend.Models.Plan", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("DBZapTend.Models.Prompt", b =>
                {
                    b.Navigation("ValoresVariaveis");

                    b.Navigation("Variaveis");
                });

            modelBuilder.Entity("DBZapTend.Models.Variavei", b =>
                {
                    b.Navigation("ValoresVariaveis");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Instances");

                    b.Navigation("Payments");

                    b.Navigation("UserNichos");

                    b.Navigation("ValoresVariaveis");
                });
#pragma warning restore 612, 618
        }
    }
}
